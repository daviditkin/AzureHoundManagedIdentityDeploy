{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "7670355564056572973"
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group to deploy into"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "containerUMIName": {
      "type": "string",
      "metadata": {
        "description": "Name of the container user managed identity"
      }
    },
    "containerUMIResourceGroupName": {
      "type": "string",
      "defaultValue": "[parameters('resourceGroupName')]",
      "metadata": {
        "description": "Resource group for the container UMI (defaults to main resource group if not specified)"
      }
    },
    "deploymentUMIName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployment user managed identity"
      }
    },
    "deploymentUMIResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Resource group containing the deployment user managed identity"
      }
    },
    "azureTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure tenant ID to analyze"
      }
    },
    "bloodhoundInstanceDomain": {
      "type": "string",
      "metadata": {
        "description": "Bloodhound instance domain"
      }
    },
    "bloodhoundTokenId": {
      "type": "securestring",
      "metadata": {
        "description": "Bloodhound token ID"
      }
    },
    "bloodhoundToken": {
      "type": "securestring",
      "metadata": {
        "description": "Bloodhound token"
      }
    }
  },
  "variables": {
    "containerName": "[format('{0}-container-group', parameters('resourceGroupName'))]",
    "imageName": "ghcr.io/daviditkin/azurehound:feature-managed-identity-auth-18"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[not(equals(parameters('containerUMIResourceGroupName'), parameters('resourceGroupName')))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[parameters('containerUMIResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(subscription().subscriptionId, parameters('containerUMIName'), 'Reader')]",
      "properties": {
        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment'), '2022-09-01').outputs.principalId.value]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "containerIdentity-deployment",
      "resourceGroup": "[parameters('containerUMIResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerUMIName": {
            "value": "[parameters('containerUMIName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "16341684917233027402"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "containerUMIName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('containerUMIName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerUMIName')), 'Reader')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerUMIName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerUMIName'))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerUMIName'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerUMIName')), '2023-01-31').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('containerUMIResourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "graph-permissions-deployment",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentUMIId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('deploymentUMIResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('deploymentUMIName'))]"
          },
          "deploymentUMIResourceGroupName": {
            "value": "[parameters('deploymentUMIResourceGroupName')]"
          },
          "deploymentUMIName": {
            "value": "[parameters('deploymentUMIName')]"
          },
          "containerUMIPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment'), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "16317240147768102752"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "deploymentUMIId": {
              "type": "string"
            },
            "containerUMIPrincipalId": {
              "type": "string"
            },
            "deploymentUMIResourceGroupName": {
              "type": "string"
            },
            "deploymentUMIName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "graph-permissions-script",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('deploymentUMIResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('deploymentUMIName')))]": {}
                }
              },
              "properties": {
                "azPowerShellVersion": "9.7",
                "retentionInterval": "P1D",
                "timeout": "PT30M",
                "cleanupPreference": "Always",
                "scriptContent": "      $ErrorActionPreference = \"Continue\"\n      \n      # Initialize arrays for tracking\n      $warningsList = @()\n      $successList = @()\n      $needManualSetup = $false\n      \n      try {\n          $token = (Get-AzAccessToken -ResourceUrl \"https://graph.microsoft.com/\").Token\n          $graphAppId = \"00000003-0000-0000-c000-000000000000\"\n          \n          $graphSp = Get-AzADServicePrincipal -ApplicationId $graphAppId\n          if (-not $graphSp) {\n              $needManualSetup = $true\n          }\n          \n          if ($graphSp) {\n              $headers = @{\n                  'Authorization' = \"Bearer $token\"\n                  'Content-Type' = 'application/json'\n              }\n\n              try {\n                  $apiUrl = \"https://graph.microsoft.com/v1.0/servicePrincipals/$($env:ContainerUMIPrincipalId)/appRoleAssignments\"\n                  $existingAssignments = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Get\n                  \n                  $directoryReadAllId = \"7ab1d382-f21e-4acd-a863-ba3e13f7da61\"\n                  $existingAssignment = $existingAssignments.value | Where-Object { \n                      $_.appRoleId -eq $directoryReadAllId -and \n                      $_.resourceId -eq $graphSp.Id\n                  }\n\n                  if (-not $existingAssignment) {\n                      try {\n                          $body = @{\n                              principalId = $env:ContainerUMIPrincipalId\n                              resourceId = $graphSp.Id\n                              appRoleId = $directoryReadAllId\n                          } | ConvertTo-Json\n\n                          $result = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $body\n                          $successList += \"Directory.Read.All\"\n                      }\n                      catch {\n                          $needManualSetup = $true\n                      }\n                  }\n                  else {\n                      $successList += \"Directory.Read.All\"\n                  }\n              }\n              catch {\n                  $needManualSetup = $true\n              }\n          }\n      }\n      catch {\n          $needManualSetup = $true\n      }\n\n      # Create a structured permission status message\n      $statusMessage = if ($needManualSetup) {\n          @\"\nMANUAL PERMISSION SETUP REQUIRED\n------------------------------\nThe container's managed identity requires the following Microsoft Graph permission:\n- Directory.Read.All\n\nPlease run the provided setup script to configure these permissions:\n./setup-container-permissions.ps1 -PrincipalId $($env:ContainerUMIPrincipalId)\n\"@\n      } else {\n          \"All required permissions have been configured successfully.\"\n      }\n      \n      # Output the results\n      $DeploymentScriptOutputs = @{\n          needsManualSetup = $needManualSetup\n          statusMessage = $statusMessage\n          assignedPermissions = $successList\n      }\n    ",
                "environmentVariables": [
                  {
                    "name": "ContainerUMIPrincipalId",
                    "value": "[parameters('containerUMIPrincipalId')]"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "needsManualSetup": {
              "type": "bool",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'graph-permissions-script'), '2023-08-01').outputs.needsManualSetup]"
            },
            "statusMessage": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'graph-permissions-script'), '2023-08-01').outputs.statusMessage]"
            },
            "assignedPermissions": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'graph-permissions-script'), '2023-08-01').outputs.assignedPermissions]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-instance-deployment",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerGroupName": {
            "value": "[variables('containerName')]"
          },
          "containerUMIResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "imageName": {
            "value": "[variables('imageName')]"
          },
          "bloodhoundInstanceDomain": {
            "value": "[parameters('bloodhoundInstanceDomain')]"
          },
          "azureTenantId": {
            "value": "[parameters('azureTenantId')]"
          },
          "bloodhoundTokenId": {
            "value": "[parameters('bloodhoundTokenId')]"
          },
          "bloodhoundToken": {
            "value": "[parameters('bloodhoundToken')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "8329346131486449463"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "containerGroupName": {
              "type": "string"
            },
            "containerUMIResourceId": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "bloodhoundInstanceDomain": {
              "type": "string"
            },
            "azureTenantId": {
              "type": "string"
            },
            "bloodhoundTokenId": {
              "type": "securestring"
            },
            "bloodhoundToken": {
              "type": "securestring"
            }
          },
          "variables": {
            "config": {
              "app": "",
              "auth": "",
              "batchsize": 100,
              "config": "/home/nonroot/.config/azurehound/config.json",
              "instance": "[format('https://{0}/', parameters('bloodhoundInstanceDomain'))]",
              "json": false,
              "managed-identity": true,
              "maxconnsperhost": 20,
              "maxidleconnsperhost": 20,
              "region": "cloud",
              "streamcount": 25,
              "tenant": "[parameters('azureTenantId')]",
              "token": "[parameters('bloodhoundToken')]",
              "tokenid": "[parameters('bloodhoundTokenId')]",
              "verbosity": 0
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[parameters('containerGroupName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('containerUMIResourceId'))]": {}
                }
              },
              "properties": {
                "containers": [
                  {
                    "name": "azurehound",
                    "properties": {
                      "image": "[parameters('imageName')]",
                      "command": [
                        "/azurehound",
                        "start"
                      ],
                      "volumeMounts": [
                        {
                          "name": "config-volume",
                          "mountPath": "/home/nonroot/.config/azurehound"
                        }
                      ],
                      "resources": {
                        "requests": {
                          "cpu": "1",
                          "memoryInGB": "1"
                        }
                      }
                    }
                  }
                ],
                "volumes": [
                  {
                    "name": "config-volume",
                    "secret": {
                      "config.json": "[base64(string(variables('config')))]"
                    }
                  }
                ],
                "osType": "Linux",
                "restartPolicy": "Never"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'graph-permissions-deployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "containerUMIResourceId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment'), '2022-09-01').outputs.resourceId.value]"
    },
    "containerUMIPrincipalId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerUMIResourceGroupName')), 'Microsoft.Resources/deployments', 'containerIdentity-deployment'), '2022-09-01').outputs.principalId.value]"
    },
    "permissionSetupRequired": {
      "type": "bool",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'graph-permissions-deployment'), '2022-09-01').outputs.needsManualSetup.value]"
    },
    "permissionStatus": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'graph-permissions-deployment'), '2022-09-01').outputs.statusMessage.value]"
    },
    "assignedPermissions": {
      "type": "array",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'graph-permissions-deployment'), '2022-09-01').outputs.assignedPermissions.value]"
    }
  }
}